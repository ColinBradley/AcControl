@page "/cameras/{DeviceId}/live";

@using AcControl.Server.Data;
@using AcControl.Server.Data.Models
@using Humanizer
@using RingApi.Entities;
@implements IDisposable;
@inject IJSRuntime JS

@inject RingDevicesService RingService

<PageTitle>Oal Home Camera Live - @this.Device?.Description</PageTitle>

<h1>
	<a href="/cameras" class="icon" style="-webkit-mask-image:url('/icons/back.svg')"></a>
	@this.Device?.Description - Live
</h1>

<div class="video-container">
	<video autoplay loop @ref=mVideoElement>
	</video>
</div>

@code {
	private IJSObjectReference? mCallModule;

	private bool IsInitialized { get; set; } = false;

	private RingDeviceModel? Device { get; set; }

	private ElementReference? mVideoElement;

	[Parameter]
	public string? DeviceId { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (!int.TryParse(this.DeviceId, out var deviceIdInt))
		{
			return;
		}

		await this.RingService.Subscribe();

		this.Device = this.RingService.Devices.FirstOrDefault(d => d.Id == deviceIdInt);


		//_ = this.InvokeAsync(async () => {
		//	await (
		//		mCallModule?.InvokeVoidAsync(
		//			"makeCall",
		//			new
		//			{
		//				VideoElement = mVideoElement,
		//				CallInfo = this.CallInfo
		//			})
		//		?? ValueTask.CompletedTask
		//	);
		//});

		this.IsInitialized = true;

		await base.OnInitializedAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			mCallModule = await JS.InvokeAsync<IJSObjectReference>("import", "/js/cameraCall.js");

			await mCallModule.InvokeVoidAsync("setVideoElement", mVideoElement);
			var clientSdp = await mCallModule.InvokeAsync<string>("getConnectionOfferSdp", null);

			if (!int.TryParse(this.DeviceId, out var deviceIdInt) || clientSdp is null)
			{
				return;
			}

			var startInfo = await this.RingService.StartLiveView(deviceIdInt, clientSdp);

			await mCallModule.InvokeVoidAsync("setConnectionCallSdp", startInfo.Sdp);
		}

		await base.OnAfterRenderAsync(firstRender);
	}

	public void Dispose()
	{
		this.RingService.Unsubscribe();
	}
}
@page "/cameras";

@using AcControl.Server.Data;
@using Humanizer
@using KoenZomers.Ring.Api.Entities;
@implements IDisposable;

@inject RingDevicesService RingService

<PageTitle>Oal Home Cameras</PageTitle>

<h1>Cameras</h1>

@if (this.RingService.Session is null)
{
	<label>
		<span>2FA Code:</span>
		<input @bind-value=@this.RingService.AuthCode placeholder="2FA Code">
	</label>
	<button @onclick=@this.AuthButton_Clicked>Auth</button>
	return;
}

@{
	var today = DateTime.Today;
}

<div class="devices">
	@foreach (var doorBell in this.RingService.Devices)
	{
		<div class="device">
			<h2>@doorBell.Description</h2>
			@if (doorBell.LatestSnapshot != null && doorBell.LatestSnapshotTime != null)
			{
				<img src="/api/ring/snapshots/@doorBell.Id?timestamp=@doorBell.LatestSnapshotTime.Value.ToString("u")" class="preview">
				<span class="updated-time">@doorBell.LatestSnapshotTime.Value.Humanize()</span>

				<div class="details">
					@{
						var latestEvent = doorBell.GetEventsInOrder().FirstOrDefault();
						if (latestEvent is not null)
						{
							<a href="/cameras/@doorBell.Id/events/@latestEvent.Id">
								<span class="icon" style="-webkit-mask-image:url('@(latestEvent.Kind switch { "ding" => "/icons/doorbell.svg", _ => "/icons/motion.svg" })')"></span>

							  @latestEvent.CreatedAtDateTime.Humanize()</a>
						}

						var todaysEventCount = doorBell.GetEventsInOrder().Where(e => e.CreatedAtDateTime != null && e.CreatedAtDateTime.Value.Date == today).Count();
						<a href="/cameras/@doorBell.Id/events">@todaysEventCount event@(todaysEventCount == 1 ? "" : "s") today</a>
					}
				</div>
			}
			else
			{
				<div>Awaiting first image...</div>
			}
		</div>
	}
</div>

@code {
	private Timer? mUpdateTimer;

	protected override async Task OnInitializedAsync()
	{
		await this.RingService.Subscribe();
		this.RingService.AnythingChanged += this.RingService_Changed;

		mUpdateTimer = new Timer(
			_ => this.InvokeAsync(() => this.StateHasChanged()),
			null,
			TimeSpan.FromSeconds(.5),
			TimeSpan.FromSeconds(.5)
		);

		await base.OnInitializedAsync();
	}

	private async Task AuthButton_Clicked()
	{
		await this.RingService.TryAuth();

		await this.RingService.UpdateDevices();
	}

	private async void RingService_Changed()
	{
		await this.InvokeAsync(() => { this.StateHasChanged(); });
	}

	public async void Dispose()
	{
		if (mUpdateTimer is not null)
		{
			await mUpdateTimer.DisposeAsync();
		}

		this.RingService.AnythingChanged -= this.RingService_Changed;
		this.RingService.Unsubscribe();
	}
}
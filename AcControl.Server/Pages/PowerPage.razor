@page "/power"

@using AcControl.Server.Data;
@using AcControl.Server.Data.Models;
@using static AcControl.Server.Data.LuxPowerTekService;
@using Blazorise.Charts;

@implements IDisposable
@inject LuxPowerTekService Power;

<PageTitle>Oal Home Power</PageTitle>

<h1>Power</h1>

@{
    var inverter = this.Power.Inverters.FirstOrDefault();
    if (inverter is null || !inverter.IsFullyLoaded)
    {
        return;
    }
}

<div class="layout">
    @{
        var panelsTotal = inverter.RuntimeData!.Ppv1 + inverter.RuntimeData!.Ppv2;
        var consumption = inverter.ConsumptionPower;
        var batteryPercent = inverter.RuntimeData!.Soc;

        var solarState = panelsTotal > 0 ? "good" : "fair";
        var batteryState = batteryPercent < 10 ? "bad" : (inverter.RuntimeData!.PDisCharge > 0 || inverter.RuntimeData!.PDisCharge > 0) ? "fair" : "good";
        var gridState = inverter.RuntimeData!.PToGrid > 0 ? "good" : inverter.RuntimeData!.PToUser > 0 ? "bad" : "fair";
        var homeState = consumption > 2000 ? "bad" : consumption > 300 ? "fair" : "good";
    }
    <div class="item solar @solarState">
        <div class="icon" style="-webkit-mask-image:url('/icons/solar.svg')"></div>
        <div>
            <div>Front: <span class="value">@inverter.RuntimeData!.Ppv1</span> W</div>
            <div>Back: <span class="value">@inverter.RuntimeData!.Ppv2</span> W</div>
            <div>Total: <span class="value">@(panelsTotal)</span> W</div>
        </div>
    </div>
    <div class="item battery @batteryState">
        @{
            var batteryIconName =
            batteryPercent < 5 ? "0" :
            batteryPercent < 20 ? "1" :
            batteryPercent < 35 ? "2" :
            batteryPercent < 50 ? "3" :
            batteryPercent < 75 ? "4" :
            batteryPercent < 85 ? "5" :
            batteryPercent < 98 ? "6" :
            "full";
        }
        <div style="display: flex; gap: 1em; align-items: center;">
            <div class="icon" style="-webkit-mask-image:url('/icons/battery/@(batteryIconName).svg')"></div>
            <div><span class="value">@batteryPercent</span>%</div>
        </div>
        @if (inverter.RuntimeData!.PDisCharge > 0)
        {
            <div>Discharging: <span class="value">@inverter.RuntimeData!.PDisCharge</span> W</div>
        }
        @if (inverter.RuntimeData!.PCharge > 0)
        {
            <div>Charging: <span class="value">@inverter.RuntimeData!.PCharge</span> W</div>
        }
    </div>

    <div class="item home @homeState">
        <div class="icon" style="-webkit-mask-image:url('/icons/home.svg')"></div>
        <div>Usage: <span class="value">@consumption</span> W</div>
    </div>

    <div class="item grid @gridState">
        <div class="icon" style="-webkit-mask-image:url('/icons/pylon.svg')"></div>
        @if (inverter.RuntimeData!.PToGrid > 0)
        {
            <div>Exporting: <span class="value">@inverter.RuntimeData!.PToGrid</span> W</div>
        }
        else if (inverter.RuntimeData!.PToUser > 0)
        {
            <div>Importing: <span class="value">@inverter.RuntimeData!.PToUser</span> W</div>
        }
        else
        {
            <div>Idle</div>
        }
    </div>
</div>

<div style="display: grid; grid-template-columns: minmax(0, 1fr);">
    <LineChart @ref="mLineChart" TItem="int" Style="max-height: 60vh"
               Options="@(new()
        {
            Animation = new()
            {
                Duration = 0,
            },
            AspectRatio = 1.5,
            Scales = new()
            {
                X = new()
                {
                    Type = "time",
                    Grid = new()
                    {
                        Display = false,
                        BorderWidth = 0,
                    }
                },
                Y = new()
                {
                    Type = "linear",
                    Grid = new() {
                        Color = "#fff3",
                        BorderWidth = 0,
                    }
                }
            },
            Plugins = new()
            {
                Legend = new()
                {
                    Display = false,
                }
            }
        })" />
</div>

<div style="display: flex; gap: 1em; align-items: center; justify-content: space-between;">
    <div style="align-self: start; display: flex; gap: 1em; align-items: center; flex-shrink:0;">
        <button @onclick=PreviousDate_Click>&lt;</button>
        @this.DateAsText
        <button @onclick=NextDate_Click disabled="@(this.DateAsText == LuxPowerTekService.TodaysDateString)">&gt;</button>
    </div>

    <div>
        @{
            if (mCurrentSummary != null && mCurrentSummary.Length > 0)
            {
                var todaysCharges = OctopusEnergyService.GetDayCharges(
                mCurrentSummary,
                DateOnly.FromDateTime(DateTime.UtcNow));

                <div style="display: flex; gap: 1em;">
                    <div>Today:</div>
                    <div style="display: flex; gap: 1em; flex-wrap: wrap;">
                        <div>Cost: <span class=value>£@Math.Round(todaysCharges.Cost, 2).ToString("0.00")</span></div>
                        <div>Earned: <span class=value>£@Math.Round(todaysCharges.Earned, 2).ToString("0.00")</span></div>
                        <div>Savings: <span class=value>£@Math.Round(todaysCharges.Savings, 2).ToString("0.00")</span></div>
                        <div>Total: <span class=value>£@Math.Round(todaysCharges.Total, 2).ToString("0.00")</span></div>
                    </div>
                </div>
            }

            var allCharges = inverter.DaySummariesByDate
                .Select(p => OctopusEnergyService.GetDayCharges(p.Value, DateOnly.Parse(p.Key)))
                .OrderBy(c => c.Date)
                .ToArray();

            var earned = allCharges.Sum(c => c.Earned);
            var total = allCharges.Sum(c => c.Total);

            <div style="display: flex; gap: 1em;">
                <div>Overall:</div>
                <div style="display: flex; gap: 1em; flex-wrap: wrap;">
                    <div>Cost: <span class=value>£@Math.Round(allCharges.Sum(c => c.Cost), 2).ToString("0.00")</span></div>
                    <div>Earned: <span class=value>£@Math.Round(earned, 2).ToString("0.00")</span></div>
                    <div>Savings: <span class=value>£@Math.Round(allCharges.Sum(c => c.Savings), 2).ToString("0.00")</span></div>
                    <div>Total: <span class=value>£@Math.Round(total, 2).ToString("0.00")</span></div>
                </div>
            </div>

            var totalCost = 12319;
            <div style="display:flex; align-items:center; gap:1em;">
                @{
                    var totalPaidOff = total + allCharges.Sum(c => c.Cost);
                    var averageADay = totalPaidOff / allCharges.Length;
                    var remaining = totalCost - totalPaidOff;
                    var daysLeft = remaining / averageADay;
                }

                <div>Paid off: <span class="value" title="£@totalPaidOff.ToString("0.00") @@ ~£@averageADay.ToString("0.00") a day">@(Math.Round(totalPaidOff / totalCost * 100, 3))%</span></div>
                <div>Done in: @ToHumanReadableString(TimeSpan.FromDays(daysLeft))</div>
                <button @onclick=LoadAll_Click style="font-size:.6em;">Load all (@allCharges.Length Days)</button>
            </div>
        }
    </div>
</div>

@code
{
    private InverterDaySummaryPoint[]? mCurrentSummary;
    private DateOnly mChartDate = DateOnly.FromDateTime(DateTime.UtcNow);
    private LineChart<int>? mLineChart;
    private bool mIsDisposed = false;

    private string DateAsText => mChartDate.ToString("yyyy-MM-dd");

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        this.Power.Changed += this.Power_Changed;

        await this.Power.Subscribe();

        this.StateHasChanged();
    }

    private void PreviousDate_Click()
    {
        mChartDate = mChartDate.AddDays(-1);
    }

    private void NextDate_Click()
    {
        if (this.DateAsText == LuxPowerTekService.TodaysDateString)
        {
            return;
        }

        mChartDate = mChartDate.AddDays(1);
    }

    private async Task LoadAll_Click()
    {
        var inverter = this.Power.Inverters.FirstOrDefault();
        if (inverter is null)
        {
            return;
        }

        for (var date = DateOnly.FromDateTime(DateTime.UtcNow).AddDays(-1); !mIsDisposed; date = date.AddDays(-1))
        {
            var summary = await this.Power.GetDaySummary(inverter, date.ToString("yyyy-MM-dd"), default);

            _ = this.InvokeAsync(this.StateHasChanged);

            if (summary.Length == 0)
            {
                break;
            }
        }
    }

    private void Power_Changed()
    {
        this.InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }

    public void Dispose()
    {
        mIsDisposed = true;
        this.Power.Unsubscribe();
        this.Power.Changed -= this.Power_Changed;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var inverter = this.Power.Inverters.FirstOrDefault();
        if (inverter is null)
        {
            return;
        }

        var summary = await this.Power.GetDaySummary(inverter, this.DateAsText, default);

        this.SetChartData(summary);
    }

    private void SetChartData(InverterDaySummaryPoint[] summary)
    {
        if (mLineChart is null)
        {
            return;
        }

        lock (mLineChart)
        {
            if (mCurrentSummary == summary)
            {
                return;
            }
            mCurrentSummary = summary;

            this.InvokeAsync(() =>
            {
                this.StateHasChanged();
            });

            mLineChart.Clear();

            mLineChart.AddLabelsDatasetsAndUpdate(
                summary.Select(p => p.Time).ToArray(),
                new LineChartDataset<int>()
                    {
                        Label = "Solar",
                        Data = summary.Select(p => p.SolarPv).ToList(),
                        BorderColor = new[] { "#70ad4677" },
                        PointRadius = 0,
                        PointHitRadius = 50,
                        CubicInterpolationMode = "monotone",
                    },
                new LineChartDataset<int>()
                    {
                        Label = "Battery",
                        Data = summary.Select(p => p.BatteryDischarging).ToList(),
                        BorderColor = new[] { "#5a9bd577" },
                        PointRadius = 0,
                        PointHitRadius = 50,
                        CubicInterpolationMode = "monotone",
                    },
                new LineChartDataset<int>()
                    {
                        Label = "Grid",
                        Data = summary.Select(p => p.GridPower).ToList(),
                        BorderColor = new[] { "#f6686755" },
                        PointRadius = 0,
                        PointHitRadius = 50,
                        CubicInterpolationMode = "monotone",
                    },
                new LineChartDataset<int>()
                    {
                        Label = "Consumption",
                        Data = summary.Select(p => p.Consumption).ToList(),
                        BorderColor = new[] { "#ffa46177" },
                        PointRadius = 0,
                        PointHitRadius = 50,
                        CubicInterpolationMode = "monotone",
                    }
            );
        }
    }

    public static string ToHumanReadableString(TimeSpan time)
    {
        if (time.TotalDays >= 365)
        {
            var remainingDays = time.TotalDays % 365;
            return $"{Math.Floor(time.TotalDays / 365)} years, {Math.Floor(remainingDays / 30)} months, {Math.Floor(remainingDays % 30)} days";
        }
        if (time.TotalDays >= 30)
        {
            return $"{Math.Floor(time.TotalDays / 30)} months, {Math.Floor(time.TotalDays % 30)} days";
        }

        return $@"{time:%d} days";
    }
}
